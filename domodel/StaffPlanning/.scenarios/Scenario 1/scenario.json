{"qualifiers":[{"name":"modelType","value":"python"},{"name":"modelMetadata","value":"{\"fileName\":\"staff.py\",\"fileContent\":\"from docplex.mp.environment import Environment\\r\\nfrom docplex.mp.model import Model\\r\\nimport pandas as pd\\r\\n\\r\\nN_DAYS = 2\\r\\nN_PERIODS_PER_DAY = 24*4\\r\\nN_PERIODS = N_DAYS * N_PERIODS_PER_DAY\\r\\n\\r\\ndf_resources = inputs['resources']\\r\\ndf_demands = inputs['demands']\\r\\n\\r\\nenv = Environment()\\r\\n\\r\\nmdl = Model(\\\"planning\\\")\\r\\n\\r\\nresources = df_resources['id'].values.tolist()\\r\\n\\r\\nnb_periods = N_PERIODS\\r\\n\\r\\n# periods range from 0 to nb_periods excluded\\r\\nperiods = range(0, nb_periods)\\r\\n\\r\\n# days range from 0 to N_DAYS excluded\\r\\ndays = range(0, N_DAYS)\\r\\n\\r\\n# start[r,t] is number of resource r starting to work at period t\\r\\nstart = mdl.integer_var_matrix(keys1=resources, keys2=periods, name=\\\"start\\\")\\r\\n\\r\\n# work[r,t] is number of resource r working at period t\\r\\nwork = mdl.integer_var_matrix(keys1=resources, keys2=periods, name=\\\"work\\\")\\r\\n\\r\\n# nr[r] is number of resource r working in total\\r\\nnr = mdl.integer_var_dict(keys=resources, name=\\\"nr\\\")\\r\\n\\r\\n# nr[r,d] is number of resource r working on day d\\r\\nnrd = mdl.integer_var_matrix(keys1=resources, keys2=days, name=\\\"nrd\\\")\\r\\n\\r\\n# Organize all decision variables in a DataFrame indexed by 'resources' and 'periods'\\r\\ndf_decision_vars = pd.DataFrame({'start': start, 'work': work})\\r\\n\\r\\n# Set index names\\r\\ndf_decision_vars.index.names=['resources', 'periods']\\r\\n\\r\\n# Organize resource decision variables in a DataFrame indexed by 'resources' \\r\\ndf_decision_vars_res = pd.DataFrame({'nr': nr})\\r\\n\\r\\n# Set index names\\r\\ndf_decision_vars_res.index.names=['resources']\\r\\n\\r\\n# available per day\\r\\nfor r in resources:\\r\\n    min_avail = int(df_resources[df_resources.id == r].min_avail)\\r\\n    max_avail = int(df_resources[df_resources.id == r].max_avail)\\r\\n    for d in range(N_DAYS):\\r\\n        mdl.add( mdl.sum(start[r,t] for t in range(d*N_PERIODS_PER_DAY, (d+1)*N_PERIODS_PER_DAY)) == nrd[r,d])\\r\\n        mdl.add( nrd[r,d] <= nr[r] )\\r\\n    mdl.add( min_avail <= nr[r] )\\r\\n    mdl.add(        nr[r] <= max_avail )\\r\\n    \\r\\n# working\\r\\nfor r in resources:\\r\\n    duration = int(df_resources[df_resources.id == r].duration)*4\\r\\n    for t in periods:\\r\\n        mdl.add( mdl.sum(start[r,t2] for t2 in range(max(t-duration,0), t)) == work[r,t])\\r\\n        \\r\\n# work vs demand\\r\\nfor t in periods:\\r\\n    demand = int(df_demands[df_demands.period == t].demand)\\r\\n    mdl.add( mdl.sum( work[r,t] for r in resources) >= demand)\\r\\n    \\r\\nif 'fixed' in inputs:\\r\\n    fixed = inputs['fixed']\\r\\n    for i in range(len(fixed)):\\r\\n        r = fixed.get_value(index=i, col='resources')\\r\\n        p = fixed.get_value(index=i, col='periods')\\r\\n        v = fixed.get_value(index=i, col='value')\\r\\n        mdl.add( start[r,p] == v )\\r\\n    \\r\\ntotal_cost = mdl.sum( int(df_resources[df_resources.id == r].cost)*nr[r] for r in resources)\\r\\nn_fix_used = nr['fix']\\r\\nn_temp_used = nr['temp']\\r\\n\\r\\nmdl.add_kpi(total_cost   , \\\"Total Cost\\\")\\r\\nmdl.add_kpi(n_fix_used   , \\\"Nb Fix Used\\\")\\r\\nmdl.add_kpi(n_temp_used   , \\\"Nb Temp Used\\\")\\r\\n#mdl.add_kpi(lambda x,y:1, \\\"Feasibility\\\", 1))\\r\\n\\r\\nmdl.minimize(total_cost)\\r\\n\\r\\nmdl.context.solver.log_output = True\\r\\n\\r\\nif mdl.solve():\\r\\n    print \\\"  Feasible \\\" + str(mdl.objective_value)\\r\\n\\r\\n    df_sol_starts = df_decision_vars.start.apply(lambda v: v.solution_value).unstack(level='resources')\\r\\n    df_sol_starts = df_sol_starts.stack(level='resources').to_frame()\\r\\n    df_sol_starts['resources'] = df_sol_starts.index.get_level_values('resources') \\r\\n    df_sol_starts['periods'] = df_sol_starts.index.get_level_values('periods') \\r\\n    df_sol_starts.columns = ['value', 'resources', 'periods'] \\r\\n    df_sol_starts = df_sol_starts.reset_index(drop=True)\\r\\n    \\r\\n    df_sol_works = df_decision_vars.work.apply(lambda v: v.solution_value).unstack(level='resources')\\r\\n    df_sol_works = df_sol_works.stack(level='resources').to_frame()\\r\\n    df_sol_works['resources'] = df_sol_works.index.get_level_values('resources') \\r\\n    df_sol_works['periods'] = df_sol_works.index.get_level_values('periods') \\r\\n    df_sol_works.columns = ['value', 'resources', 'periods'] \\r\\n    df_sol_works = df_sol_works.reset_index(drop=True)\\r\\n    \\r\\n    df_sol_nr = df_decision_vars_res.nr.apply(lambda v: v.solution_value).to_frame()\\r\\n    df_sol_nr['resources'] = df_sol_nr.index\\r\\n    df_sol_nr = df_sol_nr.reset_index(drop=True)\\r\\n\\r\\n    outputs = {}\\r\\n    outputs['starts'] = df_sol_starts\\r\\n    outputs['works'] = df_sol_works\\r\\n    outputs['nr'] = df_sol_nr\\r\\nelse:\\r\\n    print \\\"  Infeasible\\\"\\r\\n    outputs = {}\\r\\n\\r\\n\",\"lastUploadTime\":1527264416923}"}],"parentId":"StaffPlanning","category":"scenario","creator":"arnaud.schulz@fr.ibm.com","createdAt":1512036628619,"usage":{"lastModificationTime":1527264416697,"lastModifier":"alain.chabrier@ibm.com"},"dataUsagePerCategory":{"input":{"lastModificationTime":1527264249149,"lastModifier":"alain.chabrier@ibm.com"},"":{"lastModificationTime":1512036632411,"lastModifier":"arnaud.schulz@fr.ibm.com"},"output":{"lastModificationTime":1527263931907,"lastModifier":"alain.chabrier@ibm.com"},"model":{"lastModificationTime":1527264416621,"lastModifier":"alain.chabrier@ibm.com"}},"state":"available","tables":[{"tableType":{"columns":[{"key":"period","dataType":"Number"},{"key":"demand","dataType":"Number"}]},"name":"demands","category":"input","lineage":"python client","numberOfRows":576,"creator":"arnaud.schulz@fr.ibm.com","createdAt":1512036628853,"lastUpdater":"arnaud.schulz@fr.ibm.com","updatedAt":1512036629028,"path":"demands.csv"},{"tableType":{"columns":[{"key":"id","dataType":"String"},{"key":"duration","dataType":"Number"},{"key":"cost","dataType":"Number"},{"key":"min_avail","dataType":"Number"},{"key":"max_avail","dataType":"Number"}]},"name":"resources","category":"input","lineage":"python client","numberOfRows":2,"creator":"arnaud.schulz@fr.ibm.com","createdAt":1512036632284,"lastUpdater":"alain.chabrier@ibm.com","updatedAt":1527264249149,"path":"resources.csv"}],"assets":[{"name":"log.txt","category":"output","creator":"alain.chabrier@ibm.com","createdAt":1527263931907,"lastUpdater":"alain.chabrier@ibm.com","updatedAt":1527263931907,"path":"log.txt"},{"name":"model.py","category":"model","creator":"alain.chabrier@ibm.com","createdAt":1527264416621,"lastUpdater":"alain.chabrier@ibm.com","updatedAt":1527264416621,"contentType":"application/json","path":"model.py"}]}